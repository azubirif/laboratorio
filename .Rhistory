fn = t.data.frame(data[1:6, 3])
library("knitr")
library("readODS")
data = read_ods("./BalanzaCorriente.ods")
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
kable(data[1:6, 1:5], caption="Balanza de corriente, variando el circuito.")
View(data)
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
x0 = long,
y0 = fn - (9,7996413*0.00001 + t.data.frame(data[1:6,2])*0.0000001),
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
x0 = long,
y0 = fn - (9.7996413*0.00001 + t.data.frame(data[1:6,2])*0.0000001),
x1 = long,
y1 = fn + (9.7996413*0.00001 + t.data.frame(data[1:6,2])*0.0000001),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
library("knitr")
library("readODS")
data = read_ods("./BalanzaCorriente.ods")
library("knitr")
library("readODS")
data = read_ods("./BalanzaCorriente.ods")
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
error_fn = t.data.frame(data(1:6, 8))
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
error_fn = t.data.frame(data[1:6, 8])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
x0 = long,
y0 = fn - error_fn,
x1 = long,
y1 = fn + error_fn,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
error_fn = t.data.frame(data[1:6, 8])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
x0 = long,
y0 = fn - error_fn,
x1 = long,
y1 = fn + error_fn,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
library("knitr")
library("readODS")
data = read_ods("./BalanzaCorriente.ods")
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
error_fn = t.data.frame(data[1:6, 8])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
x0 = long,
y0 = t.data.frame(data[1:6,9]),
x1 = long,
y1 = t.data.frame(data[1:6,10]),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
error_minus = t.data.frame(data[0:6,9])
error_plus = t.data.frame(data[1:6,10])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
x0 = long,
y0 = error_minus,
x1 = long,
y1 = error_plus,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
error_minus = t.data.frame(data[0:6,9])
error_plus = t.data.frame(data[1:6,10])
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
error_minus,
long,
error_plus,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = t.data.frame(data[1:6, 3])
long = t.data.frame(data[1:6,4])
error_minus = t.data.frame(data[0:6,9])
error_plus = t.data.frame(data[1:6,10])
error_minus
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
error_minus,
long,
error_plus,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = as.vector(t.data.frame(data[1:6, 3]))
long = t.data.frame(data[1:6,4])
error_minus = t.data.frame(data[0:6,9])
error_plus = t.data.frame(data[1:6,10])
fn
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
error_minus,
long,
error_plus,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = as.vector(t.data.frame(data[1:6, 3]))
long = as.vector(t.data.frame(data[1:6,4]))
error_minus = as.vector(t.data.frame(data[0:6,9]))
error_plus = as.vector(t.data.frame(data[1:6,10]))
fn
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
error_minus,
long,
error_plus,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = as.vector(t.data.frame(data[1:6, 3]))
long = as.vector(t.data.frame(data[1:6,4]))
error_minus = as.vector(t.data.frame(data[0:6,9]))
error_plus = as.vector(t.data.frame(data[1:6,10]))
long
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
error_minus,
long,
error_plus,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = as.vector(t.data.frame(data[1:6, 3]))
long = as.numeric(t.data.frame(data[1:6,4]))
error_minus = as.vector(t.data.frame(data[0:6,9]))
error_plus = as.vector(t.data.frame(data[1:6,10]))
long
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
error_minus,
long,
error_plus,
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = as.numeric(t.data.frame(data[1:6, 3]))
long = as.numeric(t.data.frame(data[1:6,4]))
error_minus = as.vector(t.data.frame(data[0:6,9]))
error_plus = as.vector(t.data.frame(data[1:6,10]))
long
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
fn - t.data.frame(data[1:6,8]),
long,
fn + t.data.frame(data[1:6,8]),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = as.numeric(t.data.frame(data[1:6, 3]))
long = as.numeric(t.data.frame(data[1:6,4]))
error_minus = as.vector(t.data.frame(data[0:6,9]))
error_plus = as.vector(t.data.frame(data[1:6,10]))
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
fn - t.data.frame(data[1:6,8]),
long,
fn + t.data.frame(data[1:6,8]),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
kable(data[1:6, 1:5], caption="Balanza de corriente, variando el circuito.")
fn = as.numeric(t.data.frame(data[1:6, 3]))
long = as.numeric(t.data.frame(data[1:6,4]))
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
fn - t.data.frame(data[1:6,8]),
long,
fn + t.data.frame(data[1:6,8]),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.1, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
long - 0.00005,
fn,
long+0.00005,
fn,
angle=90,
code=3,
length=0.1,
col="darkgreen"
)
fn = as.numeric(t.data.frame(data[1:6, 3]))
long = as.numeric(t.data.frame(data[1:6,4]))
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
fn - t.data.frame(data[1:6,8]),
long,
fn + t.data.frame(data[1:6,8]),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
long - 0.00005,
fn,
long+0.00005,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen"
)
m = lm(fn, long, data = data)
m = lm(fn ~ as.numeric(long), data = data)
m
m = lm(fn ~ as.numeric(long), data = data)
summary(m)
m = lm(fn ~ as.numeric(long), data = data)
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
fn - t.data.frame(data[1:6,8]),
long,
fn + t.data.frame(data[1:6,8]),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
long - 0.00005,
fn,
long+0.00005,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen"
)
abline(m)
View(m)
library("knitr")
library("readODS")
data = read_ods("./BalanzaCorriente.ods")
kable(data[10:16,1:5], caption="Balanza de corriente, variando la intensidad.")
m = lm(fn ~ as.numeric(long), data = data)
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
as.numeric(long),
fn -as.numeric(t.data.frame(data[1:6,8])),
as.numeric(long),
fn + as.numeric(t.data.frame(data[1:6,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
m = lm(fn ~ as.numeric(long), data = data)
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
as.numeric(long),
fn -as.numeric(t.data.frame(data[1:5,8])),
as.numeric(long),
fn + as.numeric(t.data.frame(data[1:5,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
fn = as.numeric(t.data.frame(data[1:5, 3]))
fn = as.numeric(t.data.frame(data[1:5, 3]))
fn = as.numeric(t.data.frame(data[1:5, 3]))
library("knitr")
library("readODS")
data = read_ods("./BalanzaCorriente.ods")
fn = as.numeric(t.data.frame(data[1:5, 3]))
long = as.numeric(t.data.frame(data[1:5,4]))
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
long,
fn - as.numeric(t.data.frame(data[1:6,8])),
long,
fn + as.numeric(t.data.frame(data[1:6,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
long - 0.00005,
fn,
long+0.00005,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen"
)
m = lm(fn ~ as.numeric(long), data = data)
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
as.numeric(long),
fn -as.numeric(t.data.frame(data[1:5,8])),
as.numeric(long),
fn + as.numeric(t.data.frame(data[1:5,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
long - 0.00005,
fn,
long+0.00005,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen",
)
abline(m)
m = lm(fn ~ as.numeric(long), data = data)
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
as.numeric(long),
fn -as.numeric(t.data.frame(data[1:5,8])),
as.numeric(long),
fn + as.numeric(t.data.frame(data[1:5,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
long - 0.00005,
fn,
long+0.00005,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen",
)
abline(m)
summary(m)
m = lm(fn ~ as.numeric(long), data = data)
plot(long, fn, xlab="Longitud (m)", ylab="F_N (N)")
arrows(
as.numeric(long),
fn -as.numeric(t.data.frame(data[1:5,8])),
as.numeric(long),
fn + as.numeric(t.data.frame(data[1:5,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
long - 0.00005,
fn,
long+0.00005,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen",
)
abline(m)
summary(m)
fn = as.numeric(t.data.frame(data[11:16, 3]))
intens = as.numeric(t.data.frame(data[11:16, 1]))
plot(intens, fn, xlab ="Intensidad (A)", ylab ="Fuerza normal (N)")
arrows(
intens,
fn - as.numeric(t.data.frame(data[11:16,8])),
intens,
fn + as.numeric(t.data.frame(data[11:16,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
intens - 0.001,
fn,
intens+0.001,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen"
)
kable(data[10:16,1:5], caption="Balanza de corriente, variando la intensidad.")
fn = as.numeric(t.data.frame(data[11:16, 3]))
intens = as.numeric(t.data.frame(data[11:16, 1]))
plot(intens, fn, xlab ="Intensidad (A)", ylab ="Fuerza normal (N)")
arrows(
intens,
fn - as.numeric(t.data.frame(data[11:16,8])),
intens,
fn + as.numeric(t.data.frame(data[11:16,8])),
angle = 90,    # Ángulo de las líneas transversales
code = 3,      # Barras en ambos extremos
length = 0.05, # Longitud de las líneas transversales
col = "darkred"
)
arrows(
intens - 0.001,
fn,
intens+0.001,
fn,
angle=90,
code=3,
length=0.05,
col="darkgreen"
)
m2 = lm(fn ~ intens, data = data)
abline(m2)
library("knitr")
library("readODS")
data = read_ods("./CargaYDescarga.ods")
View(data)
plot(t.data.frame(data[1:12,9]), t.data.frame(data[1:12,11]))
plot(t.data.frame(data[1:12,9]), t.data.frame(data[1:12,2]))
plot(t.data.frame(data[1:12,9]), t.data.frame(data[1:12,3]))
plot(t.data.frame(data[1:12,9]), t.data.frame(data[14:24,2]))
plot(t.data.frame(data[14:24,9]), t.data.frame(data[14:24,2]))
library("knitr")
library("readODS")
data = read_ods("./CargaYDescarga.ods")
plot(t.data.frame(data[55:65, 1]), t.data.frame(data[67:77,1]))
plot(t.data.frame(data[55:65, 1]), t.data.frame(data[67:77,1]))
m2 = lm(t.data.frame(data[67:77,1]) ~ t.data.frame(data[55:65, 1]))
plot(t.data.frame(data[55:65, 1]), t.data.frame(data[67:77,1]))
m2 = lm(t.data.frame(data[67:77,1]) ~ t.data.frame(data[55:65, 1]), data = data)
plot(t.data.frame(data[55:65, 1]), t.data.frame(data[67:77,1]))
m2 = lm(t.data.frame(data[67:77,1]) ~ t.data.frame(data[55:65, 1]), data = data)
